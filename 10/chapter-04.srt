1
00:00:00,000 --> 00:00:03,880
Chapter 4: Playing part 1 sequence once

2
00:00:03,880 --> 00:00:08,025
SP: OK, so we want to play this thing, at least once.

3
00:00:08,030 --> 00:00:10,580
Let's just make the first player play its thing.

4
00:00:10,585 --> 00:00:11,520
DN: Sure.

5
00:00:11,525 --> 00:00:17,780
So I'm going to copy this
here and add it as a comment.

6
00:00:17,795 --> 00:00:19,875
Obviously we don't know how to play the thing.

7
00:00:19,880 --> 00:00:27,010
But I'm going to simulate this as
an array. Make it as zeros and ones.

8
00:00:27,025 --> 00:00:27,640
DN: Yes, sure.

9
00:00:27,650 --> 00:00:32,615
SP: So it's one, one, one, and
the score is zero, so it's nothing.

10
00:00:33,000 --> 00:00:46,510
Then one, one, one zero, one, one, zero, one,
zero, one, one, zero.  So that's the same, but in binary.

11
00:00:46,530 --> 00:00:48,360
DN: Yes, binary solo.

12
00:00:48,360 --> 00:00:54,850
SP: Yes. Sometimes what I do when
you have things that come from strings,

13
00:00:54,865 --> 00:00:59,690
because people are comfortable
drawing things, kind of like ASCII art.

14
00:00:59,700 --> 00:01:05,680
You could parse it and say
if it's an x replace it with a one  etc.

15
00:01:05,690 --> 00:01:10,100
But, in this case its short
enough for us to leave it like that.

16
00:01:10,120 --> 00:01:12,790
Yes, that should be short enough.

17
00:01:12,800 --> 00:01:20,615
So, we can assume that
every element of the array is a step.

18
00:01:20,650 --> 00:01:29,190
So I will arbitrarily give it a stepLength,
say 0.2 seconds. Because web audio uses seconds.

19
00:01:30,180 --> 00:01:33,835
So what I will do to play the sequence initially,

20
00:01:33,840 --> 00:01:39,966
is calculate the timing for all this
and schedule the play, so we can listen.

21
00:01:39,960 --> 00:01:43,560
so we can reuse the same buffer

22
00:01:43,610 --> 00:01:51,310
I don't need to load it every time, just load it
once and reuse it with different buffer sources.

23
00:01:51,310 --> 00:01:58,710
So instead of playing the buffer,
what I'll do is play the sequence.

24
00:01:58,710 --> 00:02:01,870
So I'll change this.

25
00:02:01,870 --> 00:02:06,710
With the decodedBuffer... I'll change things later.

26
00:02:06,760 --> 00:02:11,870
I want to inaud up on things that already exist.

27
00:02:11,910 --> 00:02:14,760
[Silence]

28
00:02:22,980 --> 00:02:26,020
It's not behaving so...

29
00:02:26,020 --> 00:02:29,890
Normally my font is very small
so I can see everything in one go.

30
00:02:29,900 --> 00:02:34,250
But here I can't so I need two panes both in the center.

31
00:02:35,340 --> 00:02:38,930
When it's a long file like this I like to see the top.

32
00:02:38,930 --> 00:02:44,200
Also I've found you can use this
:vsp to have two different files.

33
00:02:44,220 --> 00:02:51,120
So you can look at say, the class
in one side and in the other.

34
00:02:51,140 --> 00:02:53,360
I was like, this is the best discovery I've made!

35
00:02:53,360 --> 00:02:56,650
Because I thought that the
vertical split was only for the same file.

36
00:02:56,690 --> 00:03:00,940
I didn't know you could view
different files, so this was a good discovery.

37
00:03:00,970 --> 00:03:06,580
So I've got this sequence, and I
know how long I want to play each step for.

38
00:03:06,600 --> 00:03:11,820
So we'll just go through that and
arrange for other things to be played.

39
00:03:11,850 --> 00:03:15,340
[Silence]

40
00:03:21,940 --> 00:03:27,270
So initially, time is zero.

41
00:03:27,270 --> 00:03:28,950
DN: Right.

42
00:03:28,970 --> 00:03:33,220
So if I go through the
sequence and I know the stepLength.

43
00:03:33,230 --> 00:03:41,200
I need to be adding the stepLength to time,
because I want to say "do all these things at this time"

44
00:03:41,200 --> 00:03:43,150
DN: Yes.

45
00:03:43,180 --> 00:03:48,540
SP: So it should play the sequence at that position.

46
00:03:48,570 --> 00:03:54,690
So if it's one it would be truthy and if it's
zero it won't be truthy, so I won't do this thing.

47
00:03:54,710 --> 00:03:57,310
DN: Oh yes OK.

48
00:03:57,310 --> 00:04:02,690
SP: If it should play, I would say playBuffer.

49
00:04:02,720 --> 00:04:08,810
But I don't know when, so I need to add a new parameter.

50
00:04:08,850 --> 00:04:17,310
So I say when. And instead of just
`start()`, I'll say `start(when)`.And I'll say at `t`.

51
00:04:17,350 --> 00:04:23,030
But actually `t` is not zero.
T has to be the AudioContext.currentTime.

52
00:04:23,030 --> 00:04:26,770
Because, the way it works is
when you create another context...

53
00:04:26,770 --> 00:04:30,520
I don't know if it's when you create
another context or when the page is created.

54
00:04:30,550 --> 00:04:37,740
But essentially the clock starts running, so
when you say to web audio I want to do this thing,

55
00:04:37,750 --> 00:04:44,720
you don't tell it in the scripts time,
but in the clock for the audio context.

56
00:04:44,740 --> 00:04:51,210
So when you want to scale things, you want to do
that relative to the audio context 'timer' or 'clock'

57
00:04:51,230 --> 00:04:52,640
or whatever you want to call it.

58
00:04:52,650 --> 00:04:56,280
So if you start with the current time, you say
"run it from there" and we keep adding things,

59
00:04:56,300 --> 00:05:01,100
and it's like it's all in the same
scale, we are using seconds here.

60
00:05:01,110 --> 00:05:08,340
Because everything is using seconds
that should all be correct. So it has to play,

61
00:05:08,370 --> 00:05:16,420
I was checking this, this is going
to play all the time, it has to.

62
00:05:16,440 --> 00:05:25,900
So this is going to create 12 buffer sources and
it's going to connect them and start them.

63
00:05:25,960 --> 00:05:30,910
They're going to be scheduled to start
playing then at some point they will just die.

64
00:05:30,920 --> 00:05:31,900
DN: Yes right.

65
00:05:31,900 --> 00:05:33,500
SP: And that's the way you
should do things in web audio.

66
00:05:33,520 --> 00:05:38,370
You don't need to worry about
deleting things, or stopping or re-using them

67
00:05:38,400 --> 00:05:40,710
because it's better to just schedule everything.

68
00:05:40,710 --> 00:05:47,110
And let web audio take care of
things because it goes in a different thread.

69
00:05:47,150 --> 00:05:51,630
And you can't be sure that the things
that your doing in this thread are the same.

70
00:05:51,630 --> 00:05:52,600
DN: I see.

71
00:05:52,630 --> 00:05:57,320
SP: In the same time scale or,
you know... I call it the parallel universe.

72
00:05:57,350 --> 00:06:00,090
Just send things and hope for the best.

73
00:06:00,090 --> 00:06:04,550
So in theory, this should
now play. [We hear the claps]

74
00:06:04,550 --> 00:06:07,570
So see, they have disappeared,
because they are being destroyed.

75
00:06:07,570 --> 00:06:10,460
I will try it again. [We hear the claps again]

76
00:06:10,470 --> 00:06:11,260
DN: Yes, how interesting.

77
00:06:11,280 --> 00:06:17,390
SP: Yes, but this is just happening once.
So this is good. It played the sequence.

78
00:06:17,420 --> 00:06:21,620
So I'm going to make another commit.
This is where I get obsessive about this.

79
00:06:21,640 --> 00:06:24,930
[Silence]

