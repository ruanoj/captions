1
00:00:00,000 --> 00:00:02,670
Chapter 9: Add play and pause buttons.

2
00:00:02,840 --> 00:00:07,440
SP: Now we have this thing we can
start adding the web components;

3
00:00:07,470 --> 00:00:12,440
this is why we wanted to add the build system,
not just for the sake of having a build system.

4
00:00:12,460 --> 00:00:14,950
DN: Right.

5
00:00:15,270 --> 00:00:19,010
SP: So here... I want to load the web components.

6
00:00:21,170 --> 00:00:25,600
This will make sure that the
polyfill and everything is loaded.

7
00:00:26,240 --> 00:00:29,970
But this is maybe better outside here.

8
00:00:29,970 --> 00:00:33,340
So [webpack] just puts the code in there.

9
00:00:33,340 --> 00:00:37,450
[Sole thinks]

10
00:00:37,530 --> 00:00:41,180
I also want to load my component.

11
00:00:45,980 --> 00:00:49,120
And I need to register it as well,

12
00:00:49,154 --> 00:00:52,810
because there are two parts to using
web components with custom elements.

13
00:00:52,820 --> 00:00:59,660
You need to load the prototype, and then register;
which is making it available to the parser.

14
00:00:59,680 --> 00:01:07,660
So here you can use 'openmusic-transport' or you
can use 'mega-component', or whatever you want.

15
00:01:07,700 --> 00:01:10,570
I've made that in a way that you
can register it any way that you want.

16
00:01:10,570 --> 00:01:14,220
For example, you may want to
put different versions of the component.

17
00:01:14,250 --> 00:01:17,830
And the parser can only cope with one name.

18
00:01:17,870 --> 00:01:22,240
So if you try to register something
that already exists it won't let you.

19
00:01:24,880 --> 00:01:28,370
I don't know if that's the best
solution but it works for me.

20
00:01:28,370 --> 00:01:32,030
DN: So is that going to be the name
of the tag you're going to use in the DOM.

21
00:01:32,040 --> 00:01:35,250
SP: This lets the browser know that
there is a new tag that it can use.

22
00:01:35,280 --> 00:01:42,340
So if it finds openmusic-transport in the
index.html we will be able to include the thing.

23
00:01:44,360 --> 00:01:47,270
Hopefully... I hope this works.

24
00:01:47,270 --> 00:01:50,280
[Sole types]

25
00:01:51,000 --> 00:01:53,440
OK the completion is good.

26
00:01:53,460 --> 00:01:58,110
And then here is my parser saying,
I don't know what you're doing.

27
00:01:58,180 --> 00:02:02,720
This is the problem with using web
components, nothing knows what you are using.

28
00:02:02,750 --> 00:02:04,960
But I guess you just have to cope with it.

29
00:02:04,960 --> 00:02:07,880
And the problem is I need to watch.

30
00:02:07,880 --> 00:02:10,550
I need to rebuild this thing now.

31
00:02:10,730 --> 00:02:14,400
So I need to run build etc.

32
00:02:14,560 --> 00:02:21,580
So were going to use the webpack
watch version thingy. Watch mode.

33
00:02:26,870 --> 00:02:31,130
[inaud]

34
00:02:31,130 --> 00:02:34,190
[Silence]

35
00:02:36,570 --> 00:02:43,120
It's pretty much the same but with extra arguments.

36
00:02:43,320 --> 00:02:48,670
So with browserify, it's so modular that
it doesn't even have the watch function itself.

37
00:02:48,690 --> 00:02:53,030
You need to install watchify,
which then calls browserify.

38
00:02:53,080 --> 00:02:54,340
That's the cool thing with webpack.

39
00:02:54,360 --> 00:02:58,370
I still haven't explored all the
advantages but so far this is neat enough.

40
00:02:58,370 --> 00:03:00,800
I guess i if you don't want special things because,

41
00:03:00,840 --> 00:03:06,140
with browserify you also have browserify
transforms; I don't know if webpack supports those.

42
00:03:06,170 --> 00:03:10,030
These are the things I have learned so far.

43
00:03:10,030 --> 00:03:14,780
So if I run watch now it should
compile the thing and then keep watching.

44
00:03:14,820 --> 00:03:22,200
So if I change something here
and save... There is no difference.

45
00:03:22,340 --> 00:03:25,330
[Silence]

46
00:03:27,360 --> 00:03:30,470
Yes, created something now because it's different.

47
00:03:30,470 --> 00:03:34,920
I think if there is no change
it doesn't rewrite things.

48
00:03:34,930 --> 00:03:40,930
So that's cool when you're saving out of habit.

49
00:03:40,930 --> 00:03:45,070
So if I go to... I've got my
component here.[clapping plays].

50
00:03:45,120 --> 00:03:49,100
Ah OK it doesn't have anything
and it's not connected to anything.

51
00:03:49,110 --> 00:03:51,230
I can press these and nothing happens.

52
00:03:51,245 --> 00:03:56,420
DN: That's interesting already.
Pressing play disables the stop button.

53
00:03:56,420 --> 00:04:02,530
SP: Yes that's functionality from my
component because I really hate writing UI.

54
00:04:02,550 --> 00:04:06,520
So if I write it once and it works
I want to use it as much as I can.

55
00:04:06,590 --> 00:04:15,090
So detecting this is not super hard but if you
can stop having to do that all the time it's better.

56
00:04:15,120 --> 00:04:21,040
So it emits events, and you
can listen to those events.

57
00:04:21,040 --> 00:04:26,510
If you just press play it will
give you a play event, or stop.

58
00:04:26,520 --> 00:04:29,370
Or, if you change the bpm, so you can access that thing.

59
00:04:29,400 --> 00:04:34,790
I need to listen to it and do things
accordingly. So I'm going to connect both things.

60
00:04:34,880 --> 00:04:41,770
The issue with this component so far is
that there's no way for me to tell it to start playing.

61
00:04:41,820 --> 00:04:45,520
Or to display the playing state.

62
00:04:45,520 --> 00:04:54,080
So my hack is to find the button and trigger
the click event. But this is not the best thing.

63
00:04:54,100 --> 00:04:59,360
I want to find some way of specifying
what's the current status declaratively.

64
00:04:59,420 --> 00:05:04,100
In the mark up it should say "this should be
already playing". Instead of me clicking the button.

65
00:05:04,140 --> 00:05:07,160
DN: Something like an autoplay attribute?

66
00:05:07,200 --> 00:05:12,010
SP: No no no, right now if you
look at the markup it just has the transport.

67
00:05:12,020 --> 00:05:16,700
I would like to be able to say
something like: status="playing".

68
00:05:16,700 --> 00:05:24,330
And if I specify this, the play button should
be disabled and the stop button enabled.

69
00:05:24,380 --> 00:05:26,260
But right now you can't do that.

70
00:05:26,330 --> 00:05:35,020
So I'm going to do a kind of hack where
I will add a listener to play and stop,

71
00:05:35,060 --> 00:05:37,780
and then I will immediately
click play so it starts playing.

72
00:05:37,800 --> 00:05:41,210
Instead of me starting the play()
function and changing the status of the button.

73
00:05:41,250 --> 00:05:50,360
I'm going to attach listeners, and then
programmatically click play as if I was the user.

74
00:05:50,580 --> 00:05:53,220
That's how it works so far. It's a hack!

75
00:05:53,280 --> 00:06:00,970
In theory, in future I should be able to specify it
differently, but for now I'm going to use that trick.

76
00:06:01,100 --> 00:06:04,100
So I need to define the element.

77
00:06:06,860 --> 00:06:11,110
The good thing about using web components
as custom elements is that they are just DOM elements.

78
00:06:11,110 --> 00:06:16,890
So you can just use getElementById, or
querySelector, or, you don't need to use whatever.

79
00:06:16,900 --> 00:06:20,900
For example, if you use React,
it's wrapped in whatever React is using.

80
00:06:20,920 --> 00:06:25,910
So you can't access the DOM elements that easily
because it wraps them up in a precious way.

81
00:06:25,910 --> 00:06:26,410
DN: Yes.

82
00:06:26,430 --> 00:06:31,670
But with web components or
polymer, you just use the elements.

83
00:06:31,670 --> 00:06:35,760
In this case I'm going to use querySelector.

84
00:06:40,860 --> 00:06:41,790
Close these things...

85
00:06:41,790 --> 00:06:51,720
That should give me the element and I can add
the event listener, like with any other DOM thingy.

86
00:06:51,750 --> 00:06:58,680
So I can say when play happens, start playing.

87
00:07:00,850 --> 00:07:02,520
But I don't want to start...

88
00:07:02,570 --> 00:07:06,250
I should probably add this thing once...

89
00:07:06,750 --> 00:07:09,560
No, this is all fine.

90
00:07:09,560 --> 00:07:14,010
When 'Play' (is pressed) then we start.

91
00:07:14,010 --> 00:07:17,180
What we'll do here is, play here the button.

92
00:07:19,090 --> 00:07:21,430
Yeah, wait and you'll see.

93
00:07:21,430 --> 00:07:24,050
Let me undo this...

94
00:07:24,090 --> 00:07:27,380
Let's separate this thing so
you can see what I'm doing.

95
00:07:27,380 --> 00:07:31,160
We are adding the events here.

96
00:07:31,260 --> 00:07:36,580
When the play button in the
transport element is clicked, we want to start.

97
00:07:36,590 --> 00:07:38,720
Which is what we're doing up here.

98
00:07:38,790 --> 00:07:44,670
So instead of doing this thing,
we're going to do transport.play element.

99
00:07:44,670 --> 00:07:47,270
Which is not like that but....

100
00:07:48,500 --> 00:07:55,010
This is hack and I'm going to mark it as that: HACK!

101
00:07:55,010 --> 00:08:00,630
So we should probably do something
like FIXME hack so we can search for that later,

102
00:08:00,650 --> 00:08:07,300
and make sure this hack is not surviving, but anyway...

103
00:08:07,360 --> 00:08:11,330
Because this is a hack I'm
going to do something kind of gross.

104
00:08:11,330 --> 00:08:16,010
I'm going to look for a button which is a play button.

105
00:08:16,010 --> 00:08:19,700
A class play because that's how it's created.

106
00:08:19,700 --> 00:08:25,770
If you look at the sites you
will see the class is play.

107
00:08:25,770 --> 00:08:33,080
So I'm going to look for this
button and I'm going to click it.

108
00:08:37,370 --> 00:08:47,550
So when all the samples are loaded I want to
click the button and it's going to be automatic.

109
00:08:47,580 --> 00:08:52,220
\DN: So it's a sort of imperative version of autoplay.

110
00:08:52,220 --> 00:08:54,590
SP: Yes, exactly. Via the buttons.

111
00:08:54,590 --> 00:08:59,050
So then I just need to care about
this thing, is it the code for everything,

112
00:08:59,050 --> 00:09:05,960
Because I've got the events for
everything and likewise when I stop...

113
00:09:05,960 --> 00:09:08,710
[Sole types]

114
00:09:10,890 --> 00:09:18,530
I could just... And the same with start.

115
00:09:21,860 --> 00:09:27,110
OK So... I'll deal with the bpm later. Hopefully...

116
00:09:28,390 --> 00:09:33,120
Something's not really happy here.

117
00:09:34,800 --> 00:09:39,010
Oh, it's muted. That's interesting.

118
00:09:39,010 --> 00:09:44,910
OK so it's playing automatically.
Without us having to stop it.

119
00:09:44,910 --> 00:09:47,730
[They listen]

120
00:09:47,750 --> 00:09:51,440
It's not being stopped for some reason.

121
00:09:54,520 --> 00:09:55,310
It's correct.

122
00:09:55,330 --> 00:10:00,680
What's the name of the event?
It should be stop but it's not working.

123
00:10:00,680 --> 00:10:05,690
Is the function called a stop, maybe it doesn't exist.

124
00:10:06,230 --> 00:10:08,720
Well we haven't tried it before.

125
00:10:08,720 --> 00:10:12,250
DN: Yes, we haven't tested that function until now.

126
00:10:12,250 --> 00:10:19,240
SP: So what happens when I click stop.
We're going to use the debugger for once.

127
00:10:19,240 --> 00:10:22,040
[They listen]

128
00:10:22,040 --> 00:10:27,060
We haven't pressed stop. It has stopped, good.

129
00:10:29,750 --> 00:10:31,470
DN: scheduleTimeout is null.

130
00:10:31,530 --> 00:10:37,220
SP: Have I actually stored this anywhere?

131
00:10:37,700 --> 00:10:43,850
So we haven't been sending it to anything.

132
00:10:43,850 --> 00:10:47,660
If we clear the thing in-between
it shouldn't call it again.

133
00:10:51,150 --> 00:10:55,430
I should remove the debugger.

134
00:10:55,480 --> 00:10:58,390
I should make a thing so
every time it finishes building,

135
00:10:58,400 --> 00:11:02,230
it says something with the same
program that says 'Done' when it stops building.

136
00:11:02,230 --> 00:11:08,210
I don't know if you've seen
this thing inaud?

137
00:11:08,310 --> 00:11:09,820
[Computer says Hi.]

138
00:11:09,850 --> 00:11:12,910
Sometimes, when it's a very long
build I do something like 'say done'.

139
00:11:12,940 --> 00:11:14,100
[Computer says 'done']

140
00:11:14,120 --> 00:11:18,990
I can do that in the background
and go back to what I was doing.

141
00:11:18,990 --> 00:11:24,060
OK so this should be doing it's thing. [they listen] OK.

142
00:11:24,270 --> 00:11:27,060
OK it stops.

143
00:11:27,060 --> 00:11:32,120
[They listen]

144
00:11:32,520 --> 00:11:38,570
DN: Am I right in thinking that the
stop button is acting as a pause button?

145
00:11:38,570 --> 00:11:38,970
SP: Yes.

146
00:11:38,970 --> 00:11:41,930
DN: It stops you in time, and when
you press play again it picks up where it left off.

147
00:11:41,930 --> 00:11:46,040
SP: Maybe I could rename it? But this
is a web component, so I can't really.

148
00:11:46,090 --> 00:11:50,580
I guess for the challenge... Yeah,
but it's not very configurable.

149
00:11:50,600 --> 00:11:53,610
It does what it wants, but
the button doesn't say 'pause'.

150
00:11:53,640 --> 00:11:55,380
DN: When I set the challenge I said 'play' and 'stop'

151
00:11:55,420 --> 00:11:58,460
without giving much though to what I meant by stop.

152
00:11:58,480 --> 00:12:00,540
SP: Exactly, the client wasn't clear here!

153
00:12:00,560 --> 00:12:02,420
DN: No, that's right.

154
00:12:02,420 --> 00:12:08,970
SP: It's literally play and stop. I was making
sure that it would continue in the right place.

155
00:12:09,070 --> 00:12:10,540
DN: That's really cool.

156
00:12:10,540 --> 00:12:12,540
[They listen]

157
00:12:14,850 --> 00:12:19,190
SP: And now we need to try to do the
bpm and I could maybe do a commit?

158
00:12:19,220 --> 00:12:22,170
I'm going to try and split this thing.

159
00:12:22,170 --> 00:12:27,250
I like to have one thing running on one
side and the other on the other side.

160
00:12:28,540 --> 00:12:33,720
And I also have npm in my bashrc or whatever,

161
00:12:33,740 --> 00:12:39,490
so every time I open a terminal it loads this node
in particular. So that why it takes a bit of time.

162
00:12:39,490 --> 00:12:46,060
'Use transport for play and stop', to be more exact.

